modules:
  - .db_data
---
objects:
  - borrower: Individual
  - co_borrower: |
      DAList.using(
      object_type=Individual,
      ask_number=True)
  - guarantor: |
      DAList.using(
      object_type=Individual,
      ask_number=True)
  - collateral_properties: |
      DAList.using(
      object_type=Individual,
      ask_number=True)
---
code: |
  branch_address = branch_addres(branch_place)[0]
---
id: interview order
initial: True
code: |
  aggrement_details
  company_type_of_borrower
  borrower_details
  if  is_co_borrower_available:
    for i in co_borrower:
      i
  is_guarantor_available
  if is_guarantor_available:
    for i in guarantor:
      i
  for i in collateral_properties:
    i
  branch_details
  loan_details
  ratnafin_official_details
  e_stamp
  wait_screen
  final_shown

---
field: aggrement_details
question: |
  Agreement Detailss
fields:
  - Date of the Agreement : agreement_date 
    datatype: date
  - Place of Execution : execution_place 
---
question: |
  E-Stamping Details of Loan Against Property
fields:
  - Facility Agreement : e_stamp
    datatype: file
    accept: |
      "application/pdf, image/png"
    required: False
  - Declaration cum Undertaking Cum Authority : e_stamp_DCUCA
    datatype: file
    accept: |
      "application/pdf, image/png"
    required: False
  - Vernacular Declaration and Confirmation : e_stamp_VDAC
    datatype: file
    accept: |
      "application/pdf, image/png"
    required: False
  - Deed Of Guarantee  : e_stamp_DOG
    datatype: file
    show if:
      code: |
        is_guarantor_available == True
    accept: |
      "application/pdf, image/png"
    required: False
  - Memorandum in Relation to Security Deposit  : e_stamp_MIRTSD
    datatype: file
    show if:
      code: |
        security_deposit_or_dsra == True
    accept: |
      "application/pdf, image/png"
    required: False
  - DECLARATION FOR IMMOVABLE PROPERTY : e_stamp_DFIP
    datatype: file
    accept: |
      "application/pdf, image/png"
    required: False
   
---
question: |
  DECLARATIONS CUM UNDERTAKINGS CUM AUTHORITY
fields:
  - What Type of Borrower : company_type_of_borrower
    choices:
      - Proprietorship Firm
      - Individual
      - Partnership Firm
      - Limited Liability Partnership (LLP)
      - Private Limited Company
      - Public Limited Company
      - Hindu Undivided Family

---
field: borrower_details
question: |
  Details of the Borrower 
fields:
  - Constitution: company_type_of_borrower
    js disable if: |
      ${ json.dumps(company_type_of_borrower) } !== '' || val('company_type_of_borrower') === NaN
  - First Name : borrower.name.first  
    show if:
      code: |
        company_type_of_borrower == "Individual"
  - Middle Name: borrower.name.middle 
    show if:
      code: |
        company_type_of_borrower == "Individual"
    required: False
  - Last Name: borrower.name.last
    show if:
      code: |
        company_type_of_borrower == "Individual"
  - Company Name: borrower_company
    show if:
      code: |
        company_type_of_borrower != "Individual"
  - Coparcener Names : copercener_names
    show if:
      code: |
        company_type_of_borrower == "Hindu Undivided Family"
  - Is this Borrower a Property Owner?: borrower_property_owner
    datatype: yesnoradio
  - Occupation : borrower_occupation
    show if: 
      code : |
        company_type_of_borrower == "Individual"
    js show if: |
      val("borrower_property_owner") === true
  - LLPIN : llpin
    show if:
      code: |
        company_type_of_borrower == "Limited Liability Partnership (LLP)"
  - CIN No.: cin
    show if:
      code: |
        company_type_of_borrower == "Public Limited Company" or company_type_of_borrower == "Private Limited Company" 
  - TAN/PAN : borrower_pan_or_tan_or_cin
  - Address of the Borrower: borrower.address.address
  - City of the Borrower: borrower.address.city
  - State of the Borrower: borrower.address.state
  - Zip code of the Borrower: borrower.address.zip
  - Email – address of the Borrower: borrower.email
    datatype: email
  - Phone Number of the Borrower:  borrower.phone
  - Attention Mr./Ms : borrwer_attention_mr_ms
    show if:
      code: |
        company_type_of_borrower != "Individual"
    required: False
  - Is Co-Borrowers Available ?: is_co_borrower_available
    datatype: yesnoradio
  - No of Co-Borrowers : co_borrower.target_number
    datatype: integer
    show if: is_co_borrower_available
    min: 1
  - No of Collateral Properties : collateral_properties.target_number
    datatype: integer
    min: 1
  - Is Proprietor present within the Co-borrowers ?: co_borrower_as_proprietor
    datatype: yesnoradio
    show if: 
      code : |
        company_type_of_borrower == "Proprietorship Firm"
    js show if: |
      val("is_co_borrower_available") === true
  - Is Karta present within the Co-borrowers ?: karta
    datatype: yesnoradio
    show if: 
      code : |
        company_type_of_borrower == "Hindu Undivided Family"
    js show if: |
      val("is_co_borrower_available") === true

---
code: |
  if company_type_of_borrower != "Individual":
    borrower.name.first = ''
    borrower.name.middle = ''
    borrower.name.last = ''
---
field: co_borrower_details
question: |
  Details of the ${ ordinal(i) } Co-Borrower
subquestion: |
  % if ordinal(i) == "first" and company_type_of_borrower == "Proprietorship Firm" and co_borrower_as_proprietor:
  Note: Below Co-borrower details are accepted for the Proprietor
  % else:
  % endif
  % if ordinal(i) == "first" and company_type_of_borrower == "Hindu Undivided Family" and karta:
  Note: Below Co-borrower details are accepted for the Karta
  % else:
  % endif
fields:
  - Constitution: co_borrower[i].constitution
    choices:
      - Proprietorship Firm
      - Individual
      - Partnership Firm
      - Limited Liability Partnership (LLP)
      - Private Limited Company
      - Public Limited Company
      - Hindu Undivided Family
  - First Name: co_borrower[i].name.first  
    js show if: |
      val("co_borrower[i].constitution") === "Individual"
  - Middle Name: co_borrower[i].name.middle 
    js show if: |
      val("co_borrower[i].constitution") === "Individual"
    required: False
  - Last Name: co_borrower[i].name.last
    js show if: |
      val("co_borrower[i].constitution") === "Individual"
  - Is this Co-Borrower a Partner ? :  co_borrower[i].partner
    datatype: yesno
    show if:
      code : |
        company_type_of_borrower in ('Limited Liability Partnership (LLP)','Partnership Firm')
    js show if: |
      val("co_borrower[i].constitution") === "Individual"
  - Company Name : co_borrower[i].company
    js show if: |
      val("co_borrower[i].constitution") !== "Individual"
  - Is this Co-Borrower a Property Owner?: co_borrower[i].property_owner
    datatype: yesno
  - Occupation : co_borrower[i].occupation
    js show if: |
      val("co_borrower[i].constitution") === "Individual" && val("co_borrower[i].property_owner") === true
  - TAN/PAN: co_borrower[i].pan_or_tan_or_cin 
  - Address: co_borrower[i].address.address
  - City: co_borrower[i].address.city
  - State: co_borrower[i].address.state
  - Zip Code: co_borrower[i].address.zip
  - Email – Address: co_borrower[i].email
    datatype: email
  - Phone Number: co_borrower[i].phone
  - Attention Mr./Ms : co_borrower[i].mr_ms
    hide if: 
      variable: co_borrower[i].constitution
      is: "Individual"
    required: False
---
code: |
  if co_borrower[i].constitution != 'Individual':
    co_borrower[i].name.first = ''
    co_borrower[i].name.middle = ''
    co_borrower[i].name.last = ''

---
question: |
  Guarantor Details?
fields:
  - Is Guarantor Available : is_guarantor_available
    datatype: yesnoradio
  - no.of guarantors: guarantor.target_number
    datatype: integer
    show if: is_guarantor_available
    min: 1
  - Is Proprietor present within the Guarantors ?: guarantor_as_proprietor
    datatype: yesnoradio
    show if: 
      code : |
        (company_type_of_borrower == "Proprietorship Firm" and is_co_borrower_available  and not co_borrower_as_proprietor) or (company_type_of_borrower == "Proprietorship Firm" and not is_co_borrower_available)
    js show if: |
      val("is_guarantor_available") === true
  - Is Karta present within the Gurantors ?: guarantor_karta
    datatype: yesnoradio
    show if: 
      code : |
        (company_type_of_borrower == "Hindu Undivided Family" and is_co_borrower_available  and not karta) or (company_type_of_borrower == "Hindu Undivided Family" and not is_co_borrower_available)
    js show if: |
      val("is_guarantor_available") === true
    
---
field: guarantor_details
question: |
  Details of the ${ ordinal(i) } Guarantor   
subquestion: |
  % if ordinal(i) == "first" and ((company_type_of_borrower == "Proprietorship Firm" and is_co_borrower_available  and not co_borrower_as_proprietor) or (company_type_of_borrower == "Proprietorship Firm" and not is_co_borrower_available)) and guarantor_as_proprietor:
  Note: Below Guarantor details are accepted for the Proprietor
  % else:
  % endif
  % if ordinal(i) == "first" and ((company_type_of_borrower == "Hindu Undivided Family" and is_co_borrower_available  and not karta) or (company_type_of_borrower == "Hindu Undivided Family" and not is_co_borrower_available)) and guarantor_karta:
  Note: Below Guarantor details are accepted for the Karta
  % else:
  % endif
fields:
  - Constitution: guarantor[i].constitution
    choices:
      - Proprietorship Firm
      - Individual
      - Partnership Firm
      - Limited Liability Partnership (LLP)
      - Private Limited Company
      - Public Limited Company
      - Hindu Undivided Family
  - First Name: guarantor[i].name.first  
    js show if: |
      val("guarantor[i].constitution") === "Individual"
  - Middle Name: guarantor[i].name.middle 
    js show if: |
      val("guarantor[i].constitution") === "Individual"
    required: False
  - Last Name: guarantor[i].name.last
    js show if: |
      val("guarantor[i].constitution") === "Individual"
  - Is this Guarantor a Partner ? :  guarantor[i].partner
    datatype: yesno
    show if:
      code : |
        company_type_of_borrower in ('Limited Liability Partnership (LLP)','Partnership Firm')
    js show if: |
      val("guarantor[i].constitution") === "Individual"
  - Company Name : guarantor[i].company
    js show if: |
      val("guarantor[i].constitution") !== "Individual" 
  - Is this Guarantor a Property Owner?: guarantor[i].property_owner
    datatype: yesno
  - Occupation : guarantor[i].occupation
    js show if: |
      val("guarantor[i].constitution") === "Individual" && val("guarantor[i].property_owner") === true
  - TAN/PAN: guarantor[i].pan_or_tan_or_cin 
  - Address: guarantor[i].address.address
  - City: guarantor[i].address.city
  - State: guarantor[i].address.state
  - Zip Code: guarantor[i].address.zip
  - Email – Address: guarantor[i].email
    datatype: email
  - Phone Number:  guarantor[i].phone
  - Attention Mr./Ms : guarantor[i].mr_ms
    hide if: 
      variable: guarantor[i].constitution
      is: "Individual"
    required: False
---
code: |
  if guarantor[i].constitution != 'Individual':
    guarantor[i].name.first = ''
    guarantor[i].name.middle = ''
    guarantor[i].name.last = ''
---
code : |
  individual_found = False
  corporate_found = False
  if is_guarantor_available:
    for i in guarantor:
      if i.constitution == "Individual":
        individual_found = True
      else:
        corporate_found = True
---
code : |
  all_partners = ''
  if company_type_of_borrower =='Partnership Firm':
    count =0
    if is_co_borrower_available:
      for i in co_borrower:
        if i.constitution == "Individual" and i.partner:
          count += 1
          all_partners = all_partners + "("+str(count)+")"+i.name.first + " "+i.name.middle+" "+i.name.last+", "
    if is_guarantor_available:
      for i in guarantor:
        if i.constitution == "Individual" and i.partner:
          count += 1
          all_partners = all_partners + "("+str(count)+")"+i.name.first + " "+i.name.middle+" "+i.name.last+", "
  elif company_type_of_borrower =='Limited Liability Partnership (LLP)':
    count = 0
    if is_co_borrower_available:
      for i in co_borrower:
        if i.constitution == "Individual" and i.partner:
          count += 1
          all_partners = all_partners + "("+str(count)+")"+i.name.first + " "+i.name.middle+" "+i.name.last+", "
    if is_guarantor_available:
      for i in guarantor:
        if i.constitution == "Individual" and i.partner:
          count += 1
          all_partners = all_partners + "("+str(count)+")"+i.name.first + " "+i.name.middle+" "+i.name.last+", "
---
code : |
  co_borrower_P_owners = 0
  guarantor_P_ownwers = 0
  if is_co_borrower_available:
    for i in co_borrower:
      if i.property_owner:
        co_borrower_P_owners += 1
  if is_guarantor_available:
    for i in guarantor:
      if i.property_owner:
        guarantor_P_ownwers += 1
---
field: property_details
question: |
  Details of the Collateral Property 
subquestion: |
  % if property_owner_names == ['']:
    <p style ="color:red;">Please select at least one Property Owner from the Borrower/Co-borrower(s)/Guarantor(s)<p>
  % endif
fields:
  - Property Owner Name: collateral_properties[i].property_owners
    datatype: checkboxes
    code: |
      property_owner_names
  - Description of Collateral Property: collateral_properties[i].des_of_property
  - Address of Property: collateral_properties[i].name.first
  - Present Encumbrance: collateral_properties[i].present_encumbrance
    datatype: yesnoradio
  - Ownership: collateral_properties[i].ownership
    code:  |
      ownership_type
  - Present Market Value: collateral_properties[i].present_market_value
  - On or towards North: collateral_properties[i].north_of_property
  - On or towards South: collateral_properties[i].south_of_property
  - On or towards East: collateral_properties[i].east_of_property
  - On or towards West: collateral_properties[i].west_of_property

validation code: |
  if collateral_properties.target_number >=1:
    for i in collateral_properties:
      c_am = i.present_market_value.replace(",","")
      if int(c_am) >= 10000000000 :
        validation_error('Loan amount should be less than 10000000000',field="i.present_market_value")

  
script: |
  <script>
  // Assuming security_deposit_or_dsra is defined somewhere and is a boolean
  // For instance, let security_deposit_or_dsra = true;
  
    document.getElementById('Y29sbGF0ZXJhbF9wcm9wZXJ0aWVzW2ldLnByZXNlbnRfbWFya2V0X3ZhbHVl').addEventListener('input', function (event) {
      let inputValue = event.target.value.replace(/[^\d]/g, ''); // Remove non-numeric characters
      event.target.value = formatNumber(inputValue);
    });
  
    function formatNumber(number) {
      number = parseInt(number, 10); // Parse the string to an integer
      if (isNaN(number)) {
        return ''; // Return an empty string if number is not a valid number
      }
      var afterPoint = '';
      if (number.toString().indexOf('.') > 0) {
        afterPoint = number.toString().substring(number.toString().indexOf('.'), number.length);
        number = Math.floor(number);
      }
      number = number.toString();
      var lastThree = number.substring(number.length - 3);
      var otherNumbers = number.substring(0, number.length - 3);
      if (otherNumbers != '') {
        lastThree = ',' + lastThree;
      }
      var formattedNumber = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
      return formattedNumber;
    }
  </script>
  
  
---
code: |
  property_owner_names=[]
  if borrower_property_owner:
    pon_b = ''
    if company_type_of_borrower == "Individual":
      pon_b = borrower.name.first +" "+borrower.name.middle+" "+borrower.name.last
    else:
      pon_b = borrower_company
    property_owner_names.append(pon_b)
  if is_co_borrower_available:
    for i in co_borrower:
      if i.property_owner:
        if i.constitution == "Individual":
          property_owner_names.append(i.name.first +" "+i.name.middle+" "+i.name.last) 
        else:
          property_owner_names.append(i.company)
  if is_guarantor_available:
    for i in guarantor:
       if i.property_owner:
        if i.constitution == "Individual":
          property_owner_names.append(i.name.first +" "+i.name.middle+" "+i.name.last)
        else:
          property_owner_names.append(i.company)

  if property_owner_names == []:
    property_owner_names = ['']
---
mandatory: True
code : |
  cp_amount_pmv = []
  if collateral_properties.target_number >=1:
    for i in collateral_properties:
      cp_am = i.present_market_value.replace(",","")
      cp_amount = number_to_indian_words(cp_am)
      f_amount_in_words = cp_amount.replace(",","")
      cp_amount_pmv.append(f_amount_in_words)
      
---
code : |
  if collateral_properties.target_number >=1:
    for i in collateral_properties:
      if len(property_owner_names) == 0:
        i.name.first = ''
  else:
    collateral_properties = ''
---
field: branch_details
question: |
  Details of the Branch
fields:
  - Place of the Branch : branch_place 
    code: |
      branch_places
  - Email – address(es) of the Branch: branch_mail
    datatype: email
  - Phone No. (s) of the Branch: branch_phone 
  - Attention Mr./Ms : branch_mr_ms
    required: False
---
field: loan_details
question: |
  Details of the Loan
fields:
  - Sanction Letter No.: loan_sanction_letter_number 
  - Date of Sanction Letter: loan_date_of_sanction_letter 
    datatype: date
  - Facility Type: loan_facility_type 
  - Specified Purpose: loan_specified_purpose 
  - Amount of Loan: loan_amount   
  - Rate of Interest: loan_interest_rate    
    datatype: number
  - Rate of FRR: loan_frr_rate    
    datatype: number
  - Loan Processing fee: loan_processing_fee 
  - Tenure of Loan: loan_tenure 
    datatype: integer
    hint: Tenure in months
  - Additional/Penal Interest: loan_penal_interest 
    datatype: number
    hint: Per Month
  - Repayment Method: loan_repayment_method 
    code: |
      repayment_list
  - Foreclosure of Loan: loan_foreclosure  
  - Is Security Deposit/DSRA Available: security_deposit_or_dsra
    required: False
    datatype: yesnoradio
  - Security Deposit/DSRA : security_deposit_or_dsra_des
    show if: security_deposit_or_dsra
  - MRFD-SD/DSRA : security_deposit_amount
    show if: security_deposit_or_dsra
  - Lock-in Period: loan_lockin_period 

validation code: |
  l_m = loan_amount.replace(",","")
  if int(l_m) >= 10000000000 :
    validation_error('Loan amount should be less than 10000000000',field="loan_amount")
  if security_deposit_or_dsra:
    dsa_m = security_deposit_amount.replace(",","")
    if int(dsa_m) >= 10000000000 :
      validation_error('Security Deposit amount should be less than 10000000000',field="security_deposit_amount")

script: |
  <script>
  document.getElementById('bG9hbl9hbW91bnQ').addEventListener('input', function (event) {
    let inputValue = event.target.value.replace(/[^\d]/g, ''); // Remove non-numeric characters
    event.target.value = formatNumber(inputValue);
  });

  function formatNumber(number) {
    var afterPoint = '';
    if(number.indexOf('.') > 0)
       afterPoint = number.substring(number.indexOf('.'), number.length);
    number = Math.floor(number);
    number = number.toString();
    var lastThree = number.substring(number.length-3);
    var otherNumbers = number.substring(0,number.length-3);
    if(otherNumbers != '')
        lastThree = ',' + lastThree;
    var formattedNumber = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
    return formattedNumber;
  }
  </script>
  <script>
  // Assuming security_deposit_or_dsra is defined somewhere and is a boolean
  // For instance, let security_deposit_or_dsra = true;
  
    document.getElementById('X2ZpZWxkXzE0').addEventListener('input', function (event) {
      let inputValue = event.target.value.replace(/[^\d]/g, ''); // Remove non-numeric characters
      event.target.value = formatNumber(inputValue);
    });
  
    function formatNumber(number) {
      number = parseInt(number, 10); // Parse the string to an integer
      if (isNaN(number)) {
        return ''; // Return an empty string if number is not a valid number
      }
      var afterPoint = '';
      if (number.toString().indexOf('.') > 0) {
        afterPoint = number.toString().substring(number.toString().indexOf('.'), number.length);
        number = Math.floor(number);
      }
      number = number.toString();
      var lastThree = number.substring(number.length - 3);
      var otherNumbers = number.substring(0, number.length - 3);
      if (otherNumbers != '') {
        lastThree = ',' + lastThree;
      }
      var formattedNumber = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
      return formattedNumber;
    }
  </script>
---
field: ratnafin_official_details 
question: |
  Details of the Authorized official of RPCL
fields:
  - Name : ratnaafin_official_name

---
code: |
  am = loan_amount.replace(",","")
  loan_total = number_to_indian_words(am)
  loan_amount_in_words = loan_total.replace(",","")
  if security_deposit_or_dsra:
    sd_am = security_deposit_amount.replace(",","")
    sd_amount_total = number_to_indian_words(sd_am)
    sd_amount_in_words = sd_amount_total.replace(",","")
---

code: |
  branch_places = ["Head Office", "C.G. Road","Bapunagar","Gandhinagar","Baroda","Rajkot","Surat","Himmatnagar","Mehsana","Palanpur","Vapi","Ankleshwar","Gandhidham"]
  ratnaafin_company_address="201-205, Shilp Aperia, Near Ashok Vatika, Bopal-Ambli Road, Ahmedabad, Gujarat - 380054"
  repayment_list = ["NACH","PDC","RTGS","NACH OR RTGS","ESCROW"]
  ownership_type = ["Ownership","Leasehold","Proposed Owner"]
---
code: |
  penal_interest_per_annum = round(loan_penal_interest * 12,2)
  loan_penal_interest_per_annum = "{:.2f}".format(penal_interest_per_annum)
  operator1 = ''
  formated_loan_interest_rate = "{:.2f}".format(loan_interest_rate)
  formated_loan_frr_rate = "{:.2f}".format(loan_frr_rate)
  if loan_interest_rate > loan_frr_rate:
    loan_spread_rate = round(loan_interest_rate - loan_frr_rate, 2)
    formated_loan_spread_rate = "{:.2f}".format(loan_spread_rate)
    operator1 = "+"
    interest = "{:.2f} % ( FRR {:.2f}% + {:.2f} %)".format(
        loan_interest_rate, round(loan_frr_rate, 2), round(loan_spread_rate, 2)
    )
  else:
    loan_spread_rate = round(loan_frr_rate - loan_interest_rate, 2)
    formated_loan_spread_rate = "{:.2f}".format(loan_spread_rate)
    operator1 = "-"
    interest = "{:.2f} % ( FRR {:.2f}% - {:.2f} %)".format(
        loan_interest_rate, round(loan_frr_rate, 2), round(loan_spread_rate, 2)
    )

---
code: |
  internal_path = "https://13.235.171.91/"+ url_of(the_document)
  external_path = the_document.path()
---


question: |
  Thanks for uploading that document.
subquestion: |
  I am now converting the page images. 
  Give me a minute to do so then press continue button.
continue button field: wait_screen
---
event: final_shown
question: |
  Download document for SME- LAP/Secured Personal Loan ${file_paths_storage_in_db(internal_path,external_path)}
    
attachment code: |  
  [the_document]
---
attachment:
  name: Document for SME- LAP/Secured Personal Loan
  variable name: the_document
  docx template file: LAP_Booklet_test.docx
  valid formats:
    - pdf
    - docx
---